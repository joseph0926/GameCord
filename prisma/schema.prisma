generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum MemberRole {
//   ADMIN
//   MANAGER
//   GUEST
// }

// enum ChannelType {
//   TEXT
//   AUDIO
// }

// enum VoteType {
//   UPVOTE
//   DOWNVOTE
// }

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model Server {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name       String
//   imageUrl   String
//   inviteCode String @unique

//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   gameId    String  @unique
//   game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

//   members  Member[]
//   channels Channel[]

//   @@index([profileId])
// }

// model Member {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   role MemberRole @default(GUEST)

//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   serverId  String
//   server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

//   messages       Message[]
//   directMessages DirectMessage[]

//   conversationsInitiated Conversation[] @relation("MemberOne")
//   conversationsReceived  Conversation[] @relation("MemberTwo")

//   @@index([profileId])
//   @@index([serverId])
// }

// model Channel {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String
//   type ChannelType @default(TEXT)

//   messages Message[]

//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   serverId  String
//   server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

//   @@index([profileId])
//   @@index([serverId])
// }

// model Message {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   content String
//   fileUrl String?
//   deleted Boolean @default(false)

//   memberId  String
//   member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
//   channelId String
//   channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

//   @@index([memberId])
//   @@index([channelId])
// }

// model Conversation {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   directMessages DirectMessage[]

//   memberOneId String
//   memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
//   memberTwoId String
//   memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

//   @@unique([memberOneId, memberTwoId])
//   @@index([memberTwoId])
// }

// model DirectMessage {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   content String
//   fileUrl String?
//   deleted Boolean @default(false)

//   memberId       String
//   member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

//   @@index([memberId])
//   @@index([conversationId])
// }

// model Post {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   title   String
//   content String
//   views   Int    @default(0)

//   votes    Vote[]
//   authorId String
//   author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   gameId   String
//   game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

//   tags     Tag[]
//   comments Comment[]
// }

// model Tag {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name        String
//   description String

//   postId String
//   post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// model Comment {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   content String
//   votes   Vote[]

//   authorId String
//   author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   postId   String
//   post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// model Vote {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   type      VoteType
//   voteCount Int      @default(0)

//   profileId String
//   profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   postId    String?
//   post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
//   commentId String?
//   comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
// }

// model Game {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   title       String
//   description String
//   publisher   String
//   releaseDate DateTime
//   imageUrl    String
//   category    String
//   jjal        String?
//   link        String

//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//   posts   Post[]
//   servers Server[]
// }
