// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  name     String
  password String
  imageUrl String

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  serverAvatar String
  imageUrl     String
  thema        String
  inviteCode   String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  members  Member[]
  channels Channel[]

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole @default(GUEST)

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  groupMessages  GroupMessage[]
  directMessages DirectMessage[]

  personalMessagesInitiated PersonalMessage[] @relation("MemberOne")
  personalMessagesReceived  PersonalMessage[] @relation("MemberTwo")

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
}

model Channel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ChannelType @default(TEXT)

  groupMessages GroupMessage[]

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  @@index([userId])
  @@index([serverId])
}

model GroupMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([channelId])
}

model PersonalMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId          String
  member            Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  personalMessageId String
  personalMessage   PersonalMessage @relation(fields: [personalMessageId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([personalMessageId])
}
