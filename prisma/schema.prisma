generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MANAGER
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String @unique
  email    String
  name     String
  imageUrl String

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id])

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ChannelType @default(TEXT)

  messages Message[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id])

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}
