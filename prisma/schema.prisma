// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String @unique
  email    String @db.Text
  name     String
  imageUrl String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  members  Member[]
  channels Channel[]

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole @default(GUEST)

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  messages       Message[]
  directMessages DirectMessage[]

  groupMessagesInitiated GroupMessage[] @relation("MemberOne")
  groupMessagesReceived  GroupMessage[] @relation("MemberTwo")

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
}

model Channel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ChannelType @default(TEXT)

  messages Message[]

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  @@index([userId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([channelId])
}

model GroupMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupMessageId String
  groupMessage   GroupMessage @relation(fields: [groupMessageId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([groupMessageId])
}
