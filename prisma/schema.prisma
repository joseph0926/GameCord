generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MANAGER
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String @unique
  email    String
  name     String
  imageUrl String

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id])

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ChannelType @default(TEXT)

  messages Message[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id])

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

// model Forum {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name   String
//   userId String

//   billboards Billboard[] @relation("ForumToBillboard")
//   categories Category[]  @relation("ForumToCategory")
//   games      Game[]      @relation("ForumToGame")
// }

// model Billboard {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   label      String
//   imageUrl   String
//   categories Category[]

//   forumId String
//   forum   Forum  @relation("ForumToBillboard", fields: [forumId], references: [id])

//   @@index([forumId])
// }

// model Game {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name                 String
//   rate                 Decimal
//   description          String
//   releaseDate          DateTime
//   developer            String
//   publisher            String
//   platform             String
//   genre                String
//   communityDescription String
//   communityRules       String
//   membersCount         Int      @default(0)
//   trailerUrl           String
//   websiteUrl           String
//   tags                 String[]
//   status               String
//   ageRating            String
//   images               Image[]
//   Server               Server[]
//   reviews              Review[]

//   forumId    String
//   forum      Forum    @relation("ForumToGame", fields: [forumId], references: [id])
//   categoryId String
//   category   Category @relation("CategoryToGame", fields: [categoryId], references: [id])
// }

// model Review {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   content   String
//   score     Decimal
//   upVotes   Int     @default(0)
//   downVotes Int     @default(0)

//   gameId    String
//   game      Game    @relation(fields: [gameId], references: [id])
//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id])

//   @@index([gameId])
//   @@index([profileId])
// }

// model Category {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String

//   forumId     String
//   forum       Forum     @relation("ForumToCategory", fields: [forumId], references: [id])
//   billboardId String
//   billboard   Billboard @relation(fields: [billboardId], references: [id])
//   games       Game[]    @relation("CategoryToGame")

//   @@index([forumId])
//   @@index([billboardId])
// }

// model Image {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   url String

//   gameId String
//   game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

//   @@index([gameId])
// }
